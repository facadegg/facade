---
import Spotlight from '../Spotlight.astro'
---

<Spotlight
    title="Take on a new persona"
    description="Become someone entirely new with real-time face swap technology powered by DeepFaceLab"
>
    <div class="face-swap-preview">
        <section class="face-swap-choices">
            <img src="/images/Bryan_Greynolds.jpeg" width="140" height="180" data-face="Bryan_Greynolds" />
            <img src="/images/Ewon_Spice.jpeg" width="140" height="180" data-face="Ewon_Spice" />
            <img src="/images/Kim_Jarrey.jpeg" width="140" height="180" data-face="Kim_Jarrey" />
            <img src="/images/Tim_Chrys.jpeg" width="140" height="180" data-face="Tim_Chrys" />
        </section>
        <section class="face-swap-playback">
            <canvas width="555px" height="312px" />
            <img
                alt="Man talking"
                class="face-swap-playback-overlay"
                src="https://r2.facade.gg/samples/man-talking-video-call-living-room/Anna_Tolipova.webp"
            />
        </section>
    </div>
</Spotlight>
<style>
    .face-swap-playback {
        position: relative;
    }
    .face-swap-playback > * {
        border-radius: 12px;
        position: absolute;
        left: 0;
        overflow: hidden;
        top: 0;
    }
    .face-swap-playback, .face-swap-playback > * {
        aspect-ratio: 1280 / 720;
        width: calc(90vw - 2rem);
    }
    @media (min-width: 992px) {
        .face-swap-playback, .face-swap-playback > * {
            height: calc(555px * 720 / 1280);
            width: 555px;
        }
    }

    .face-swap-preview {
        align-items: center;
        display: flex;
        flex-direction: column-reverse;
        gap: 0.75em;
    }
    .face-swap-choices {
        border-radius: 12px;
        display: flex;
        gap: 12px;
        max-height: 320px;
        max-width: 100vw;
        overflow: scroll;
    }
    .face-swap-choices > img {
        border-radius: 12px;
    }
    @media (min-width: 992px) {
        .face-swap-preview {
            flex-direction: row;
        }
        .face-swap-choices {
            flex-direction: column;
        }
    }
</style>
<script>
    const BASE_PLAYBACK_URL = 'https://r2.facade.gg/samples/man-talking-video-call-living-room'

    window.addEventListener('DOMContentLoaded', function () {
        const canvas = document.querySelector('canvas')!
        const ctx = canvas.getContext('2d')
        const video = document.createElement('video')

        const width = window.innerWidth > 992 ? 555 * devicePixelRatio : window.innerWidth - 32
        const height = width * 720 / 1280

        Object.assign(canvas, {
            width,
            height,
        })

        video.playsInline = true
        video.autoplay = true
        video.loop = true
        video.src = `${BASE_PLAYBACK_URL}/Anna_Tolipova.mp4`

        const requestFrameCallback = video.requestVideoFrameCallback ? video.requestVideoFrameCallback.bind(video) : requestAnimationFrame

        requestFrameCallback(function init() {
            if (video.paused)
                return requestFrameCallback(init)

            const overlay = document.querySelector('.face-swap-playback-overlay') as HTMLElement
            overlay.style.display = 'none'

            draw()
        })

        function draw() {
            if (!video.paused) {
                ctx.clearRect(0, 0, canvas.width, canvas.height)
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height)
            }
            requestFrameCallback(draw)
        }

        canvas.parentElement.addEventListener('click', function () {
            video.play()
        })

        for (const img of document.querySelectorAll('.face-swap-choices > img')) {
            const face = img.getAttribute('data-face')
            if (!face) continue

            (img as HTMLImageElement).addEventListener('click', function() {
                const currentTime = video.currentTime

                video.src = `${BASE_PLAYBACK_URL}/${face}.mp4`

                video.onloadedmetadata = function() {
                    video.currentTime = currentTime
                }
            })
        }
    })
</script>
